# 获取所有数据，返回QuerySet，里面包含的是对象
models.DjangoInfo.objects.all()    

# 获取所有的id，name数据，返回QuerySet，里面包含的是字典
models.DjangoInfo.objects.all().values("id","name")

# 获取所有的id，name数据，返回QuerySet，里面包含的是元组
models.DjangoInfo.objects.all().values_list("id","name")

# 获取所有数据，返回数据总数
models.DjangoInfo.objects.all().count()

# 获取id大于3的所有数据
models.DjangoInfo.objects.filter(id__gt=3)

# 获取id大于等于3的所有数据
models.DjangoInfo.objects.filter(id__gte=3)

# 获取id小于3的所有数据
models.DjangoInfo.objects.filter(id__lt=3)

# 获取id小于等于3的所有数据
models.DjangoInfo.objects.filter(id__lte=3)

# 获取id等于3，4，5的所有数据
models.DjangoInfo.objects.filter(id__in=[3,4,5])

# 获取id不等于3，4，5的所有数据
models.DjangoInfo.objects.exclude(id__in=[3,4,5])

# 获取name包含“o”的所有数据
models.DjangoInfo.objects.filter(name__contains="o")

# 获取name包含“o”的所有数据,不区分大小写
models.DjangoInfo.objects.filter(name__icontains="o")

# 获取id在3-5之间的数据，包含3和5
models.DjangoInfo.objects.filter(id__range=[3,5])

Person.objects.get(name=name)
#get是用来获取一个对象的，如果需要获取满足条件的一些人，就要用到filter

Person.objects.filter(name="abc")  # 等于Person.objects.filter(name__exact="abc") 名称严格等于 "abc" 的人

Person.objects.filter(name__iexact="abc")  # 名称为 abc 但是不区分大小写，可以找到 ABC, Abc, aBC，这些都符合条件

Person.objects.filter(name__contains="abc")  # 名称中包含 "abc"的人

Person.objects.filter(name__icontains="abc")  #名称中包含 "abc"，且abc不区分大小写

Person.objects.filter(name__regex="^abc")  # 正则表达式查询

Person.objects.filter(name__iregex="^abc")  # 正则表达式不区分大小写

#filter是找出满足条件的，当然也有排除符合某条件的
Person.objects.exclude(name__contains="WZ")  # 排除包含 WZ 的Person对象

Person.objects.filter(name__contains="abc").exclude(age=23)  # 找出名称含有abc, 但是排除年龄是23岁的

Person.objects.filter(name__contains="abc").delete() # 删除 名称中包含 "abc"的人 

#如果写成 
people = Person.objects.filter(name__contains="abc")
people.delete()
#效果也是一样的，Django实际只执行一条 SQL 语句。

#批量更新，适用于 .all()  .filter()  .exclude() 等后面 (危险操作，正式场合操作务必谨慎)
Person.objects.filter(name__contains="abc").update(name='xxx') # 名称中包含 "abc"的人 都改成 xxx
Person.objects.all().delete() # 删除所有 Person 记录

#单个 object 更新，适合于 .get(), get_or_create(), update_or_create() 等得到的 obj，和新建很类似。
twz = Author.objects.get(name="WeizhongTu")
twz.name="WeizhongTu"
twz.email="tuweizhong@163.com"
twz.save()  # 最后不要忘了保存！！！

# 获取所有数据，以id升序排列
c = f_sum.values('s_date').distinct() #删除重复
models.DjangoInfo.objects.all().order_by("id")

# 获取所有数据，以id降序排列
models.DjangoInfo.objects.all().order_by("-id")

# 获取所有数据，截取第1条到第3条(从0开始)，包括1，不包括3
models.DjangoInfo.objects.all()[1:3]

# 获取id，以及外键关联的表中的name数据
models.DjangoInfo.objects.all().values("id","b__name")

(1). 如果只是检查 Entry 中是否有对象，应该用 Entry.objects.all().exists()
(2). QuerySet 支持切片 Entry.objects.all()[:10] 取出10条，可以节省内存
(3). 用 len(es) 可以得到Entry的数量，但是推荐用 Entry.objects.count()来查询数量，后者用的是SQL：SELECT COUNT(*)
(4). list(es) 可以强行将 QuerySet 变成 列表

#QuerySet 是可以用pickle序列化到硬盘再读取出来的
import pickle
query = pickle.loads(s)     # Assuming 's' is the pickled string.
qs = MyModel.objects.all()
qs.query = query            # Restore the original 'query'.

Author.objects.filter(name__contains="WeizhongTu").filter(email="tuweizhong@163.com")
Author.objects.filter(name__contains="Wei").exclude(email="tuweizhong@163.com")
 
# 找出名称含有abc, 但是排除年龄是23岁的
Person.objects.filter(name__contains="abc").exclude(age=23)

Person.objects.all()[:10] 切片操作，前10条
Person.objects.all()[-10:] 会报错！！！
 
# 1. 使用 reverse() 解决
Person.objects.all().reverse()[:2] # 最后两条
Person.objects.all().reverse()[0] # 最后一条
 
# 2. 使用 order_by，在栏目名（column name）前加一个负号
Author.objects.order_by('-id')[:20] # id最大的20条

qs1 = Pathway.objects.filter(label__name='x')
qs2 = Pathway.objects.filter(reaction__name='A + B >> C')
qs3 = Pathway.objects.filter(inputer__name='WeizhongTu')
# 合并到一起
qs = qs1 | qs2 | qs3
#这个时候就有可能出现重复的
# 去重方法
qs = qs.distinct()

import datetime #导入日期时间模块
s_yea = 2017
s_mon = 9
s_day = 1
e_yea = 2017
e_mon = 9
e_day = 1
start_date = datetime.date(s_yea,s_mon,s_day)
end_date = datetime.date(e_yea,e_mon,e_day)
#格式化 日期
f_s_date = Serverslog.objects.filter(s_date__range=(start_date,end_date))
#执行日期查询

f_sum = Serverslog.objects.filter(s_date__range=(start_date,end_date)).values('calltimes')
count = f_s_date = Serverslog.objects.filter(s_date__range=(start_date,end_date)).count()
c = sum(i.get('calltimes',0) for i in f_sum)
print ('通话时长为：',c,'分钟')
print ('通话记录为：',count,'条')
c = f_sum.values('s_date').distinct() #删除重复
